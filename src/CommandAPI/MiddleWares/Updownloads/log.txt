Path: /index.html
QueryString: 
Method: GET
RequestBody: 
Requested at: 16.01.2021 23:33:25
Response: <!-- HTML for static distribution bundle build -->
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>Swagger UI</title>
    <link rel="stylesheet" type="text/css" href="./swagger-ui.css">
    <link rel="icon" type="image/png" href="./favicon-32x32.png" sizes="32x32" />
    <link rel="icon" type="image/png" href="./favicon-16x16.png" sizes="16x16" />
    <style>

        html {
            box-sizing: border-box;
            overflow: -moz-scrollbars-vertical;
            overflow-y: scroll;
        }

        *,
        *:before,
        *:after {
            box-sizing: inherit;
        }

        body {
            margin: 0;
            background: #fafafa;
        }
    </style>
    
</head>

<body>
    <div id="swagger-ui"></div>

    <!-- Workaround for https://github.com/swagger-api/swagger-editor/issues/1371 -->
    <script>
        if (window.navigator.userAgent.indexOf("Edge") > -1) {
            console.log("Removing native Edge fetch in favor of swagger-ui's polyfill")
            window.fetch = undefined;
        }
    </script>

    <script src="./swagger-ui-bundle.js"></script>
    <script src="./swagger-ui-standalone-preset.js"></script>
    <script>
        window.onload = function () {
            var configObject = JSON.parse('{"urls":[{"url":"/swagger/v1/swagger.json","name":"Halim\u0027s first API"}],"deepLinking":false,"displayOperationId":false,"defaultModelsExpandDepth":1,"defaultModelExpandDepth":1,"defaultModelRendering":"example","displayRequestDuration":false,"docExpansion":"list","showExtensions":false,"showCommonExtensions":false,"supportedSubmitMethods":["get","put","post","delete","options","head","patch","trace"]}');
            var oauthConfigObject = JSON.parse('{"scopeSeparator":" ","useBasicAuthenticationWithAccessCodeGrant":false,"usePkceWithAuthorizationCodeGrant":false}');

            // Workaround for https://github.com/swagger-api/swagger-ui/issues/5945
            configObject.urls.forEach(function (item) {
                if (item.url.startsWith("http") || item.url.startsWith("/")) return;
                item.url = window.location.href.replace("index.html", item.url).split('#')[0];
            });

            // If validatorUrl is not explicitly provided, disable the feature by setting to null
            if (!configObject.hasOwnProperty("validatorUrl"))
                configObject.validatorUrl = null

            // If oauth2RedirectUrl isn't specified, use the built-in default
            if (!configObject.hasOwnProperty("oauth2RedirectUrl"))
                configObject.oauth2RedirectUrl = window.location.href.replace("index.html", "oauth2-redirect.html").split('#')[0];

            // Apply mandatory parameters
            configObject.dom_id = "#swagger-ui";
            configObject.presets = [SwaggerUIBundle.presets.apis, SwaggerUIStandalonePreset];
            configObject.layout = "StandaloneLayout";

            // Begin Swagger UI call region

            const ui = SwaggerUIBundle(configObject);

            ui.initOAuth(oauthConfigObject);

            // End Swagger UI call region

            window.ui = ui
        }
    </script>
</body>
</html>

ResponseCode: 200
Responded at: 16.01.2021 23:33:25


Path: /swagger/v1/swagger.json
QueryString: 
Method: GET
RequestBody: 
Requested at: 16.01.2021 23:33:26
Response: {
  "openapi": "3.0.1",
  "info": {
    "title": " Backend API",
    "description": "Задание. API для работы с материалами",
    "termsOfService": "https://github.com/Sberwork/FileUploadAPI/blob/master/README.md",
    "contact": {
      "name": "Halim Hamidov",
      "url": "https://example.com",
      "email": ""
    },
    "license": {
      "name": "Use under 8unicorns",
      "url": "https://example.com"
    },
    "version": "v1"
  },
  "paths": {
    "/api/commands": {
      "get": {
        "tags": [
          "Commands"
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/CommandReadDto"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/CommandReadDto"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/CommandReadDto"
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Commands"
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/CommandCreateDto"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CommandCreateDto"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/CommandCreateDto"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/CommandCreateDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/CommandReadDto"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CommandReadDto"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/CommandReadDto"
                }
              }
            }
          }
        }
      }
    },
    "/api/commands/{id}": {
      "get": {
        "tags": [
          "Commands"
        ],
        "operationId": "GetCommandById",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/CommandReadDto"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CommandReadDto"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/CommandReadDto"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "Commands"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/CommandUpdateDto"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CommandUpdateDto"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/CommandUpdateDto"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/CommandUpdateDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      },
      "patch": {
        "tags": [
          "Commands"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Operation"
                },
                "nullable": true
              }
            },
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Operation"
                },
                "nullable": true
              }
            },
            "text/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Operation"
                },
                "nullable": true
              }
            },
            "application/*+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Operation"
                },
                "nullable": true
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      },
      "delete": {
        "tags": [
          "Commands"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/api/Materials": {
      "get": {
        "tags": [
          "Materials"
        ],
        "parameters": [
          {
            "name": "category",
            "in": "query",
            "schema": {
              "type": "string",
              "nullable": true
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Material"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Material"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Material"
                  }
                }
              }
            }
          }
        }
      },
      "patch": {
        "tags": [
          "Materials"
        ],
        "parameters": [
          {
            "name": "name",
            "in": "query",
            "schema": {
              "type": "string",
              "nullable": true
            }
          },
          {
            "name": "category",
            "in": "query",
            "schema": {
              "type": "string",
              "nullable": true
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Material"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Material"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Material"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Materials"
        ],
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "properties": {
                  "Name": {
                    "type": "string",
                    "nullable": true
                  },
                  "Category": {
                    "type": "string",
                    "nullable": true
                  },
                  "File": {
                    "type": "string",
                    "format": "binary",
                    "nullable": true
                  }
                }
              },
              "encoding": {
                "Name": {
                  "style": "form"
                },
                "Category": {
                  "style": "form"
                },
                "File": {
                  "style": "form"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/api/Materials/{id}": {
      "get": {
        "tags": [
          "Materials"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Material"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Material"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Material"
                }
              }
            }
          }
        }
      }
    },
    "/api/Materials/name": {
      "get": {
        "tags": [
          "Materials"
        ],
        "parameters": [
          {
            "name": "name",
            "in": "query",
            "schema": {
              "type": "string",
              "nullable": true
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/api/Materials/download": {
      "get": {
        "tags": [
          "Materials"
        ],
        "parameters": [
          {
            "name": "name",
            "in": "query",
            "schema": {
              "type": "string",
              "nullable": true
            }
          },
          {
            "name": "version",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32",
              "nullable": true
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/api/Materials/add": {
      "post": {
        "tags": [
          "Materials"
        ],
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "properties": {
                  "Name": {
                    "type": "string",
                    "nullable": true
                  },
                  "File": {
                    "type": "string",
                    "format": "binary",
                    "nullable": true
                  }
                }
              },
              "encoding": {
                "Name": {
                  "style": "form"
                },
                "File": {
                  "style": "form"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/api/users": {
      "post": {
        "tags": [
          "Users"
        ],
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "required": [
                  "Email",
                  "Password"
                ],
                "type": "object",
                "properties": {
                  "Name": {
                    "type": "string",
                    "nullable": true
                  },
                  "Email": {
                    "type": "string"
                  },
                  "Password": {
                    "type": "string"
                  }
                }
              },
              "encoding": {
                "Name": {
                  "style": "form"
                },
                "Email": {
                  "style": "form"
                },
                "Password": {
                  "style": "form"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              }
            }
          }
        }
      }
    },
    "/api/users/login": {
      "post": {
        "tags": [
          "Users"
        ],
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "required": [
                  "Email",
                  "Password"
                ],
                "type": "object",
                "properties": {
                  "Name": {
                    "type": "string",
                    "nullable": true
                  },
                  "Email": {
                    "type": "string"
                  },
                  "Password": {
                    "type": "string"
                  }
                }
              },
              "encoding": {
                "Name": {
                  "style": "form"
                },
                "Email": {
                  "style": "form"
                },
                "Password": {
                  "style": "form"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/api/users/edit": {
      "post": {
        "tags": [
          "Users"
        ],
        "parameters": [
          {
            "name": "email",
            "in": "query",
            "schema": {
              "type": "string",
              "nullable": true
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/api/users/logout": {
      "post": {
        "tags": [
          "Users"
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "CommandReadDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "howTo": {
            "type": "string",
            "nullable": true
          },
          "platform": {
            "type": "string",
            "nullable": true
          },
          "commandLine": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "CommandCreateDto": {
        "required": [
          "commandLine",
          "howTo",
          "platform"
        ],
        "type": "object",
        "properties": {
          "howTo": {
            "maxLength": 250,
            "type": "string"
          },
          "platform": {
            "type": "string"
          },
          "commandLine": {
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "CommandUpdateDto": {
        "required": [
          "commandLine",
          "howTo",
          "platform"
        ],
        "type": "object",
        "properties": {
          "howTo": {
            "maxLength": 250,
            "type": "string"
          },
          "platform": {
            "type": "string"
          },
          "commandLine": {
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "OperationType": {
        "enum": [
          0,
          1,
          2,
          3,
          4,
          5,
          6
        ],
        "type": "integer",
        "format": "int32"
      },
      "Operation": {
        "type": "object",
        "properties": {
          "operationType": {
            "$ref": "#/components/schemas/OperationType"
          },
          "path": {
            "type": "string",
            "nullable": true
          },
          "op": {
            "type": "string",
            "nullable": true
          },
          "from": {
            "type": "string",
            "nullable": true
          },
          "value": {
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "Version": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "materialId": {
            "type": "integer",
            "format": "int32"
          },
          "material": {
            "$ref": "#/components/schemas/Material"
          },
          "uploadDateTime": {
            "type": "string",
            "format": "date-time"
          },
          "size": {
            "type": "integer",
            "format": "int64"
          },
          "release": {
            "type": "integer",
            "format": "int32"
          },
          "path": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "Material": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "category": {
            "type": "string",
            "nullable": true
          },
          "versions": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Version"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "User": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "nullable": true
          },
          "userName": {
            "type": "string",
            "nullable": true
          },
          "normalizedUserName": {
            "type": "string",
            "nullable": true
          },
          "email": {
            "type": "string",
            "nullable": true
          },
          "normalizedEmail": {
            "type": "string",
            "nullable": true
          },
          "emailConfirmed": {
            "type": "boolean"
          },
          "passwordHash": {
            "type": "string",
            "nullable": true
          },
          "securityStamp": {
            "type": "string",
            "nullable": true
          },
          "concurrencyStamp": {
            "type": "string",
            "nullable": true
          },
          "phoneNumber": {
            "type": "string",
            "nullable": true
          },
          "phoneNumberConfirmed": {
            "type": "boolean"
          },
          "twoFactorEnabled": {
            "type": "boolean"
          },
          "lockoutEnd": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "lockoutEnabled": {
            "type": "boolean"
          },
          "accessFailedCount": {
            "type": "integer",
            "format": "int32"
          },
          "firstName": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      }
    }
  }
}
ResponseCode: 200
Responded at: 16.01.2021 23:33:26


Path: /api/commands
QueryString: 
Method: GET
RequestBody: 
Requested at: 16.01.2021 23:33:29
Response: [{"id":2,"howTo":"Create an EF migration","platform":"Entity Framework Core Command Line","commandLine":"dotnet ef migrations add"},{"id":1,"howTo":"Apply Migrations to DB","platform":"Entity Framework Core Command Line","commandLine":"dotnet ef database update"},{"id":3,"howTo":"Apply Migrations to DB","platform":"Entity Framework Package Manager Console","commandLine":"update database"},{"id":4,"howTo":"Create an EF migration","platform":"Entity Framework Package Manager Console","commandLine":"add-migration <name of migration>"},{"id":8,"howTo":"Run like Halimjoni","platform":".NET Core CLI pro","commandLine":"dotnet run"},{"id":9,"howTo":"Run run Halimjon run","platform":".NET pro","commandLine":"dotnet run"}]
ResponseCode: 200
Responded at: 16.01.2021 23:33:29


